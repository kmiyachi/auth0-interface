{"ast":null,"code":"import history from '../history';\nimport auth0 from 'auth0-js';\nimport { AUTH_CONFIG } from './auth0-variables';\nexport default class Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: AUTH_CONFIG.domain,\n      clientID: AUTH_CONFIG.clientId,\n      redirectUri: AUTH_CONFIG.callbackUrl,\n      responseType: 'token id_token',\n      scope: 'openid'\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    this.auth0.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        history.replace('/home');\n        console.log(err);\n        alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n      }\n    });\n  }\n\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  setSession(authResult) {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem('loggedIn', 'true'); // Set the time that the access token will expire at\n\n    let expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n    this.accessToken = authResult.accessToken;\n    this.idToken = authResult.idToken;\n    this.expiresAt = expiresAt; // navigate to the home route\n\n    history.replace('/home');\n  }\n\n  renewSession() {\n    this.auth0.checkSession({}, (err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        this.logout();\n        console.log(err);\n        alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n      }\n    });\n  }\n\n  logout() {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n    localStorage.removeItem('loggedIn');\n    this.auth0.logout({\n      returnTo: window.location.origin\n    }); // navigate to the home route\n\n    history.replace('/home');\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = this.expiresAt;\n    return new Date().getTime() < expiresAt;\n  }\n\n}","map":{"version":3,"sources":["C:\\Dev\\auth0-interface\\frontend\\src\\Auth\\Auth.js"],"names":["history","auth0","AUTH_CONFIG","Auth","constructor","WebAuth","domain","clientID","clientId","redirectUri","callbackUrl","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","authorize","parseHash","err","authResult","accessToken","idToken","setSession","replace","console","log","alert","error","localStorage","setItem","expiresAt","expiresIn","Date","getTime","checkSession","error_description","removeItem","returnTo","window","location","origin"],"mappings":"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","sourcesContent":["import history from '../history';\r\nimport auth0 from 'auth0-js';\r\nimport { AUTH_CONFIG } from './auth0-variables';\r\n\r\nexport default class Auth {\r\n    accessToken;\r\n    idToken;\r\n    expiresAt;\r\n\r\n    auth0 = new auth0.WebAuth({\r\n        domain: AUTH_CONFIG.domain,\r\n        clientID: AUTH_CONFIG.clientId,\r\n        redirectUri: AUTH_CONFIG.callbackUrl,\r\n        responseType: 'token id_token',\r\n        scope: 'openid'\r\n    });\r\n\r\n    constructor() {\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        this.isAuthenticated = this.isAuthenticated.bind(this);\r\n        this.getAccessToken = this.getAccessToken.bind(this);\r\n        this.getIdToken = this.getIdToken.bind(this);\r\n        this.renewSession = this.renewSession.bind(this);\r\n    }\r\n\r\n    login() {\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    handleAuthentication() {\r\n        this.auth0.parseHash((err, authResult) => {\r\n            if (authResult && authResult.accessToken && authResult.idToken) {\r\n                this.setSession(authResult);\r\n            } else if (err) {\r\n                history.replace('/home');\r\n                console.log(err);\r\n                alert(`Error: ${err.error}. Check the console for further details.`);\r\n            }\r\n        });\r\n    }\r\n\r\n    getAccessToken() {\r\n        return this.accessToken;\r\n    }\r\n\r\n    getIdToken() {\r\n        return this.idToken;\r\n    }\r\n\r\n    setSession(authResult) {\r\n        // Set isLoggedIn flag in localStorage\r\n        localStorage.setItem('loggedIn', 'true');\r\n\r\n        // Set the time that the access token will expire at\r\n        let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\r\n        this.accessToken = authResult.accessToken;\r\n        this.idToken = authResult.idToken;\r\n        this.expiresAt = expiresAt;\r\n\r\n        // navigate to the home route\r\n        history.replace('/home');\r\n    }\r\n\r\n    renewSession() {\r\n        this.auth0.checkSession({}, (err, authResult) => {\r\n            if (authResult && authResult.accessToken && authResult.idToken) {\r\n                this.setSession(authResult);\r\n            } else if (err) {\r\n                this.logout();\r\n                console.log(err);\r\n                alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\r\n            }\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        // Remove tokens and expiry time\r\n        this.accessToken = null;\r\n        this.idToken = null;\r\n        this.expiresAt = 0;\r\n\r\n        // Remove isLoggedIn flag from localStorage\r\n        localStorage.removeItem('loggedIn');\r\n\r\n        this.auth0.logout({\r\n            returnTo: window.location.origin\r\n        });\r\n\r\n        // navigate to the home route\r\n        history.replace('/home');\r\n    }\r\n\r\n    isAuthenticated() {\r\n        // Check whether the current time is past the\r\n        // access token's expiry time\r\n        let expiresAt = this.expiresAt;\r\n        return new Date().getTime() < expiresAt;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}